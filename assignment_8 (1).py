# -*- coding: utf-8 -*-
"""Assignment 8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rBRB4fEnjfQiddAHTqyUWXBYuyYdaXYX
"""

#Suchit Mudichintala
#CS 175

#Create a program that will count the numbers of times the letter T (uppercase or lowercase) appears in a string

#1. Get a string from the user.
userString = input("Enter a sentence: ")

#2. Create a variable to use to hold the count.
count = 0

#3. Count the Ts and print the result.

for char in userString:
  if char.lower() == "t":
    count += 1
print("The letter T appears", count, "times.")

#Create a program that will split date string and display each piece of the data

#Create a string with the date '11/26/2020'

date = '11/26/2020'

#Split the date.

date_parts = date.split("/")

#Display each piece of the date.

print("Month:", date_parts[0])
print("Day:", date_parts[1])
print("Year:", date_parts[2])

#Create a program that gets the user's first name, last name, and student ID number. Using this data, it generates a system login name.

#Get the first three letters of the first name. If the name is less than 3 charactesr, the slice will return the entire first name.

first_name = input("Enter your first name: ")

if len(first_name) < 3:
  first_name_slice = first_name
else:
  first_name_slice = first_name[:3]

#Get the first three letters of the last name. If the name is less than 3 characters, the slice will return the entire last name.

last_name = input("Enter your last name: ")

if len(last_name) < 3:
  last_name_slice = last_name
else:
  last_name_slice = last_name[:3]

#Get the last three characters of the student ID. If the ID number is less than 3 characters, the slice will return the entire ID number.

student_id = input("Enter your student ID number: ")

if len(student_id) < 3:
  student_id_slice = student_id
else:
  student_id_slice = student_id[-3:]

#4.	Put the sets of characters together.

login_name = first_name_slice + last_name_slice + student_id_slice

#5.	Return the login name.

print("Your login name is:", login_name)

# Create a program to determine whether all of the requirements are met for a valid password.

password = input("Please enter your password: ")
correct_length = False
has_uppercase = False
has_lowercase = False
has_digit = False

if len(password) >= 7:
    correct_length = True
    for char in password:
        if char.isupper():
            has_uppercase = True
        elif char.islower():
            has_lowercase = True
        elif char.isdigit():
            has_digit = True

if correct_length and has_uppercase and has_lowercase and has_digit:
    valid = True
else:
    valid = False

print(valid)

#String and list Operations in Python

#Q1: Create a program to check if a string is a palindrome.

#Remove spaces and lowercase the string

userString = input("Enter a string: ")
userString = userString.replace(" ", "")
userString = userString.lower()

#Check if the string is a palindrome

if userString == userString[::-1]:
  print("The string is a palindrome.")
else:
  print("The string is not a palindrome.")

#Q2: Create a Python program to count the number of vowels in a string.

#Get a string from the user.

userString = input("Enter a string: ")

#Convert the string to lowercase.

userString = userString.lower()

#Create a variable to hold the count.

count = 0

#Count the vowels and print the result.

for char in userString:
  if char in "aeiou":
    count += 1
print(count)

#Q3: Create a program that find the longest word in a sentence.

#Splits the string into a list of words using split().

sentence = input("Enter a sentence: ")

words = sentence.split()

#Uses the max() function with key = len to find the word with the maximum length.

longest_word = max(words, key=len)

print(longest_word)

#Q4: Create a program that find the maximum and minimum numbers in a list.

numbers = [3, 5, 2, 9, 6]

maximum = max(numbers)
minimum = min(numbers)

print("Maximum:", maximum)
print("Minimum:", minimum)

#Q5: Create a program that removes duplicates from a list.

items = [1, 2, 2, 3, 4, 4, 5]

unique_items = list(set(items))

print("List with duplicates removed:", unique_items)

#Q6: Create a program that finds even and odd numbers in a list.

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

even_numbers = [num for num in numbers if num % 2 == 0]
odd_numbers = [num for num in numbers if num % 2 != 0]

print("Even numbers:", even_numbers)
print("Odd numbers:", odd_numbers)

#Q7: Create a program that merges two lists, removes duplicates, and sorts the result.

list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

merged_list = list1 + list2

unique_list = list(set(merged_list))

sorted_list = sorted(unique_list)

print("Merged and unique list:", sorted_list)

#Q8: Create a program that find the difference between two lists.

list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

difference = list(set(list1) - set(list2))

print("Difference of list1 - list2:", difference)

#Q9: Create a program that finds all anagram (word or phrase formed by rearranging the letters of another) pairs in a list of words.

#The function goes through each possible pair of words using nested loops in the given list and checks if they are anagrams by comparing their sorted characters using sorted() method. If they are anagrams, it adds them as a tuple to the anagrams list.

def find_all_anagram_pairs(word_list):
    anagram_pairs = []
    for i in range(len(word_list)):
        for j in range(i + 1, len(word_list)):
            if sorted(word_list[i]) == sorted(word_list[j]):
                anagram_pairs.append((word_list[i], word_list[j]))
    return anagram_pairs

word_list = ["listen", "enlist", "hello", "world", "drowl"]
anagram_pairs = find_all_anagram_pairs(word_list)
print(anagram_pairs)

#Q11: Create a program that concatenates a list of strings with a specified separator " - ".

strings = ["apple", "banana", "cherry"]
separator = " - "

result = separator.join(strings)

print(result)

#Q12: Create a program that removes non-alphabetic characters from a string.

input_string = "Hello, World! 123"

# Removing non-alphabetic characters
output_string = "".join(char for char in input_string if char.isalpha())

# Displaying the result
print("Alphabetic characters only:", output_string)